// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

enum UserRoleEnum {
  ADMIN
  MERCHANT
  CUSTOMER
}

model Role {
  id        String       @id @default(uuid())
  role      UserRoleEnum @unique
  roleUsers RoleUser[]

  @@map("roles")
}

model User {
  id        String     @id @default(uuid())
  username  String     @unique @db.VarChar(100)
  password  String     @db.VarChar(100)
  token     String?    @db.Text
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  deletedAt DateTime?  @map("deleted_at")
  customers         Customer[]
  merchants         Merchant[]
  roleUser  RoleUser[]

  @@map("users")
}

model RoleUser {
  id     Int    @id @default(autoincrement())
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Customer {
  id                String      @id @default(uuid())
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  name              String    @db.VarChar(50)
  phone             String   
  address           String    @db.VarChar(100)
  pointTransaction  Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  transactions      Transaction[]
  claimRewards      ClaimReward[]

  @@map("customers")
}

model Transaction {
  id         String      @id @default(uuid())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
  transDate  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  details    TransactionDetail[]

  @@map("transactions")
}

model Reward {
  id           String      @id @default(uuid())
  name         String
  pointReward  Int
  stock        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  claims       ClaimReward[]

  @@map("rewards")
}

model ClaimReward {
  id          String      @id @default(uuid())
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String
  reward      Reward   @relation(fields: [rewardId], references: [id])
  rewardId    String
  claimDate   DateTime
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("claim_rewards")
}

model Merchant {
  id        String      @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  shopName  String
  phone     String
  address   String
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  products  Product[]

  @@map("merchants")
}

model Product {
  id          String      @id @default(uuid())
  merchant    Merchant @relation(fields: [merchantId], references: [id])
  merchantId  String
  name        String   @db.VarChar(50)
  price       Int
  stock       Int
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  deletedAt DateTime?  @map("deleted_at")
  details     TransactionDetail[]

  @@map("products")
}

model TransactionDetail {
  id            String      @id @default(uuid())
  product       Product   @relation(fields: [productId], references: [id])
  productId     String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String
  qty           Int
  price         Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("transaction_details")
}